name: "Azure Infrastructure Deployment"

on:
  push:
    branches: ["main"]

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.TF_ARM_ACCESS_KEY }}
  TF_VAR_secret_value: ${{ secrets.ACR_TOKEN }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: infrastructure-deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
